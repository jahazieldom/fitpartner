"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-*r9@k=c+lrvs1=4x5b7n9z2_z379bk@$c+9l$3y-lw*cgeq=bx"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# django-tenants settings
TENANT_MODEL = "tenants.Company"  # modelo para tenant
TENANT_DOMAIN_MODEL = "tenants.Domain"  # modelo para dominio del tenant

PUBLIC_SCHEMA_URLCONF = "backend.urls_public"

SHARED_APPS = (
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django_tenants",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "tenants",
)

TENANT_APPS = (
    "django.contrib.admin",
    "django.contrib.auth",
    "sh",
    "rest_framework",
    "rest_framework_simplejwt",
    "api",
    "utils",
    "core", #	Solo para el admin web interface
    "clients", #	Clientes finales registrados (los que asisten a clases)
    "activities", #	Clases, eventos o sesiones reservables
    "attendance", #	Registro de asistencias a sesiones
    "memberships", #	Membresías activas, pagos, duración y tipos
    "loyalty", #	Sistema de puntos, recompensas y canjes
    "staff", #	Entrenadores o instructores asignables a sesiones
    "notifications", #	Envío de mensajes (email, WhatsApp, push, etc.)
    "bookings", #	Reservaciones de sesiones hechas por clientes
    "plans", #	Planes para las clases / actividades
    "payments", #	Registro de pagos
    # "scheduling", #	(Opcional) Calendario de horarios, disponibilidades
)

INSTALLED_APPS = list(SHARED_APPS) + list(TENANT_APPS)

MIDDLEWARE = [
    "django_tenants.middleware.TenantMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                'core.context_processors.global_variables',
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASE_ROUTERS = ("django_tenants.routers.TenantSyncRouter",)

DATABASES = {
    "default": {
        "ENGINE": "django_tenants.postgresql_backend",
        "NAME": "muvon",
        # 'USER': 'usuario',
        # 'PASSWORD': 'tu_password',
        # 'HOST': 'localhost',
        # 'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "es-mx"

TIME_ZONE = "MST"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [
    #BASE_DIR / "static",  # si usas una carpeta de estáticos en el proyecto
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTHENTICATION_BACKENDS = [
    'core.backends.EmailBackend',  # primero el email backend
    'django.contrib.auth.backends.ModelBackend',  # opcional como fallback
]

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'no-reply@myapp.com'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Si usas django-tenants, puedes usar la configuración TENANT_MEDIA_ROOT para separar los archivos por tenant:
TENANT_MEDIA_ROOT = os.path.join(MEDIA_ROOT, 'tenants')

LOGIN_URL = "/login/"

PROJECT_NAME = "Muvon"

LOCAL_DEVELOPMENT = True

# Duración de la sesión en segundos (1 día = 86400 segundos)
SESSION_COOKIE_AGE = 86400

# Si True, la sesión expira al cerrar el navegador (ignora SESSION_COOKIE_AGE)
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_PAGINATION_CLASS': 'api.pagination.CustomLimitOffsetPagination',
    'PAGE_SIZE': 50,

    # 'DEFAULT_THROTTLE_CLASSES': [
    #     'rest_framework.throttling.AnonRateThrottle',
    #     'api.v2.throttling.CustomBypassUserThrottle',
    # ],
    # 'DEFAULT_THROTTLE_RATES': {
    #     'anon': '1/sec',
    #     'user': '2/sec',
    # }
}


STRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY', default='XXXX')
STRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY', default='XXXX')
STRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET', default='XXXX')

from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=15),  # 10 años (efectivamente "sin expiración")
    "REFRESH_TOKEN_LIFETIME": timedelta(days=3650),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
}




TENANT_DOMAIN_TEMPLATE = "{}.local"
TENANT_URL_TEMPLATE = "http://{}.local:8000"